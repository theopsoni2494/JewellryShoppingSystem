import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

class Jewelry {
    private int id;
    private String name;
    private String type;
    private double price;
    private int quantity;

    public Jewelry(int id, String name, String type, double price, int quantity) {
        this.id = id;
        this.name = name;
        this.type = type;
        this.price = price;
        this.quantity = quantity;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getType() {
        return type;
    }

    public double getPrice() {
        return price;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setType(String type) {
        this.type = type;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    @Override
    public String toString() {
        return "ID: " + id + ", Name: " + name + ", Type: " + type + ", Price: $" + price + ", Quantity: " + quantity;
    }
}

class JewelryShop {
    private ArrayList<Jewelry> inventory = new ArrayList<>();
    private int nextId = 1;

    public void addJewelry(String name, String type, double price, int quantity) {
        Jewelry newJewelry = new Jewelry(nextId++, name, type, price, quantity);
        inventory.add(newJewelry);
        System.out.println("Jewelry added successfully!");
    }

    public void viewInventory() {
        if (inventory.isEmpty()) {
            System.out.println("No jewelry items in the inventory.");
        } else {
            for (Jewelry jewelry : inventory) {
                System.out.println(jewelry);
            }
        }
    }

    public void updateJewelry(int id, String name, String type, double price, int quantity) {
        Jewelry jewelry = findJewelryById(id);
        if (jewelry != null) {
            jewelry.setName(name);
            jewelry.setType(type);
            jewelry.setPrice(price);
            jewelry.setQuantity(quantity);
            System.out.println("Jewelry updated successfully!");
        } else {
            System.out.println("Jewelry item not found.");
        }
    }

    public void deleteJewelry(int id) {
        Jewelry jewelry = findJewelryById(id);
        if (jewelry != null) {
            inventory.remove(jewelry);
            System.out.println("Jewelry removed successfully!");
        } else {
            System.out.println("Jewelry item not found.");
        }
    }

    private Jewelry findJewelryById(int id) {
        for (Jewelry jewelry : inventory) {
            if (jewelry.getId() == id) {
                return jewelry;
            }
        }
        return null;
    }

    public ArrayList<Jewelry> getInventory() {
        return inventory;
    }
}

class User {
    private String userId;
    private String password;
    private JewelryShop shop;

    public User(String userId, String password) {
        this.userId = userId;
        this.password = password;
        this.shop = new JewelryShop();
    }

    public String getUserId() {
        return userId;
    }

    public String getPassword() {
        return password;
    }

    public JewelryShop getShop() {
        return shop;
    }
}

class MasterUser extends User {
    private Map<String, User> users;

    public MasterUser(String userId, String password) {
        super(userId, password);
        this.users = new HashMap<>();
    }

    public void addUser(User user) {
        users.put(user.getUserId(), user);
        System.out.println("User added successfully!");
    }

    public void removeUser(String userId) {
        if (users.remove(userId) != null) {
            System.out.println("User removed successfully!");
        } else {
            System.out.println("User not found.");
        }
    }

    public void viewAllUsers() {
        if (users.isEmpty()) {
            System.out.println("No users found.");
        } else {
            for (User user : users.values()) {
                System.out.println("User ID: " + user.getUserId());
                user.getShop().viewInventory();
            }
        }
    }

    public User getUserById(String userId) {
        return users.get(userId);
    }
}

public class JewelryShopSystem {
    private static Scanner scanner = new Scanner(System.in);
    private static MasterUser masterUser = new MasterUser("master", "master123");

    public static void main(String[] args) {
        masterUser.addUser(new User("user1", "password1"));
        masterUser.addUser(new User("user2", "password2"));

        while (true) {
            System.out.println("\nWelcome to the Jewelry Shop System");
            System.out.println("1. Master User Login");
            System.out.println("2. User Login");
            System.out.println("3. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Clear the buffer

            switch (choice) {
                case 1:
                    masterUserLogin();
                    break;
                case 2:
                    userLogin();
                    break;
                case 3:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private static void masterUserLogin() {
        System.out.print("Enter Master User ID: ");
        String userId = scanner.nextLine();
        System.out.print("Enter Password: ");
        String password = scanner.nextLine();

        if (userId.equals(masterUser.getUserId()) && password.equals(masterUser.getPassword())) {
            masterMenu();
        } else {
            System.out.println("Invalid Master User ID or Password.");
        }
    }

    private static void userLogin() {
        System.out.print("Enter User ID: ");
        String userId = scanner.nextLine();
        System.out.print("Enter Password: ");
        String password = scanner.nextLine();

        User user = masterUser.getUserById(userId);
        if (user != null && user.getPassword().equals(password)) {
            userMenu(user);
        } else {
            System.out.println("Invalid User ID or Password.");
        }
    }

    private static void masterMenu() {
        int choice;
        do {
            System.out.println("\nMaster User Menu");
            System.out.println("1. Add User");
            System.out.println("2. Remove User");
            System.out.println("3. View All Users and Inventories");
            System.out.println("4. Logout");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();
            scanner.nextLine(); // Clear the buffer

            switch (choice) {
                case 1:
                    System.out.print("Enter New User ID: ");
                    String newUserId = scanner.nextLine();
                    System.out.print("Enter New User Password: ");
                    String newUserPassword = scanner.nextLine();
                    masterUser.addUser(new User(newUserId, newUserPassword));
                    break;
                case 2:
                    System.out.print("Enter User ID to Remove: ");
                    String userIdToRemove = scanner.nextLine();
                    masterUser.removeUser(userIdToRemove);
                    break;
                case 3:
                    masterUser.viewAllUsers();
                    break;
                case 4:
                    System.out.println("Logging out...");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 4);
    }

    private static void userMenu(User user) {
        JewelryShop shop = user.getShop();
        int choice;

        do {
            System.out.println("\nUser Menu");
            System.out.println("1. Add Jewelry");
            System.out.println("2. View Inventory");
            System.out.println("3. Update Jewelry");
            System.out.println("4. Delete Jewelry");
            System.out.println("5. Logout");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();
            scanner.nextLine();  // Clear the buffer

            switch (choice) {
                case 1:
                    System.out.print("Enter Jewelry Name: ");
                    String name = scanner.nextLine();
                    System.out.print("Enter Jewelry Type: ");
                    String type = scanner.nextLine();
                    System.out.print("Enter Jewelry Price: ");
                    double price = scanner.nextDouble();
                    System.out.print("Enter Jewelry Quantity: ");
                    int quantity = scanner.nextInt();
                    scanner.nextLine();  // Clear the buffer
                    shop.addJewelry(name, type, price, quantity);
                    break;
                case 2:
                    shop.viewInventory();
                    break;
                case 3:
                    System.out.print("Enter Jewelry ID to update: ");
                    int idToUpdate = scanner.nextInt();
                    scanner.nextLine();  // Clear the buffer
                    System.out.print("Enter new Jewelry Name: ");
                    String newName = scanner.nextLine();
                    System.out.print("Enter new Jewelry Type: ");
                    String newType = scanner.nextLine();
                    System.out.print("Enter new Jewelry Price: ");
                    double newPrice = scanner.nextDouble();
                    System.out.print("Enter new Jewelry Quantity: ");
                    int newQuantity = scanner.nextInt();
                    scanner.nextLine();  // Clear the buffer
                    shop.updateJewelry(idToUpdate, newName, newType, newPrice, newQuantity);
                    break;
                case 4:
                    System.out.print("Enter Jewelry ID to delete: ");
                    int idToDelete = scanner.nextInt();
                    scanner.nextLine();  // Clear the buffer
                    shop.deleteJewelry(idToDelete);
                    break;
                case 5:
                    System.out.println("Logging out...");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 5);
    }
}
